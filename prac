// // onst User = require('../models/User');
// // const sendEmail = require('../utils/sendEmail');
// // const generateOTP = require('../utils/generateOTP');
// // const bcrypt = require('bcryptjs');

// // // Request password reset with OTP
// // exports.forgotPassword = async (req, res) => {
// //   const { email } = req.body;

// //   try {
// //     const user = await User.findOne({ email });

// //     if (!user) {
// //       return res.status(400).json({ msg: 'User not found' });
// //     }

// //     const otp = generateOTP();
// //     user.resetPasswordToken = otp;
// //     user.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // 10 minutes

// //     await user.save();

// //     const resetURL = `${req.protocol}://${req.get('host')}/api/auth/verify-otp/${otp}`;
// //     const message = `You requested a password reset. Please verify your OTP using this link: \n\n ${resetURL}`;

// //     await sendEmail({
// //       to: user.email,
// //       subject: 'Password Reset OTP',
// //       text: message
// //     });

// //     res.json({ msg: 'OTP sent for password reset' });
// //   } catch (err) {
// //     res.status(500).json({ msg: 'Server error' });
// //   }
// // };

// // // Verify OTP
// // exports.verifyForgotPasswordOTP = async (req, res) => {
// //   const { otp } = req.params;

// //   try {
// //     const user = await User.findOne({
// //       resetPasswordToken: otp,
// //       resetPasswordExpire: { $gt: Date.now() }
// //     });

// //     if (!user) {
// //       return res.status(400).json({ msg: 'Invalid or expired OTP' });
// //     }

// //     res.json({ msg: 'OTP verified successfully', userId: user.id });
// //   } catch (err) {
// //     res.status(500).json({ msg: 'Server error' });
// //   }
// // };

// // // Reset password with OTP
// // exports.resetPassword = async (req, res) => {
// //   const { userId } = req.params;
// //   const { password, confirmPassword } = req.body;

// //   try {
// //     const user = await User.findById(userId);

// //     if (!user) {
// //       return res.status(400).json({ msg: 'User not found' });
// //     }

// //     if (password !== confirmPassword) {
// //       return res.status(400).json({ msg: 'Passwords do not match' });
// //     }

// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(password, salt);
// //     user.resetPasswordToken = undefined;
// //     user.resetPasswordExpire = undefined;

// //     await user.save();
// //     res.json({ msg: 'Password updated successfully' });
// //   } catch (err) {
// //     res.status(500).json({ msg: 'Server error' });
// //   }
// // };
// // exports.loginUser = async (req, res) => {
// //   const { email, password, username } = req.body; // Extract email and password from request body

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(400).json({ msg: "Invalid email or password" }); // User not found
// //     }

// //     // Step 2: Compare the provided password with the stored hashed password
// //     const isMatch = await bcrypt.compare(password, user.password);

// //     if (!isMatch) {
// //       return res.status(400).json({ msg: "Invalid email or password" }); // Passwords don't match
// //     }

// //     // Step 3: Check if the user is verified
// //     if (!user.isVerified) {
// //       return res
// //         .status(400)
// //         .json({ msg: "Please verify your account before logging in" });
// //     }

// //     // Step 4: Generate a JWT
// //     const payload = {
// //       user: {
// //         id: user.id,
// //         email: user.email,
// //         username:user.username
// //       },
// //     };

// //     jwt.sign(
// //       payload,
// //       process.env.JWT_SECRET, // Secret key from environment variables
// //       { expiresIn: "1h" }, // Token expires in 1 hour
// //       (err, token) => {
// //         if (err) throw err;
// //         // Step 5: Return the token and user data
// //         res.status(200).json({
// //           // userData: user,
// //           token,
// //           userData: {
// //             id: user.id,
// //             email: user.email,
// //             username:user.username,
// //             isVerified: user.isVerified,
// //           },
// //         });
// //       }
// //     );
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error"); // Internal server error
// //   }
// // };
// // exports.forgotPassword = async (req, res) => {
// //   const { email } = req.body;

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(404).json({ msg: "User not found" }); // Return error if user doesn't exist
// //     }

// //     // Step 2: Generate a 6-digit OTP
// //     const otp = Math.floor(100000 + Math.random() * 900000).toString(); ; // Example: 123456
// //     user.otp = otp;
// //     user.otpExpires = Date.now() + 10 * 60 * 1000; // OTP expires in 10 minutes

// //     // Step 3: Save OTP and expiration to the user's record
// //     await user.save();

// //     // Step 4: Send OTP to the user's email
// //     await sendEmail({
// //       to: "etopiaseyi@gmail.com",
// //       subject: "Password Reset OTP",
// //       text: `Your OTP for password reset is: ${otp}. This OTP will expire in 10 minutes.`,
// //     });

// //     res.status(200).json({ msg: "OTP sent to your email" }); // Response if OTP is sent
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error"); // Server error response
// //   }
// // };
// // exports.forgotPassword = async (req, res) => {
// //   const { email } = req.body;

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(404).json({ msg: "User not found" });
// //     }

// //     // Step 2: Generate OTP or reset token
// //     const resetToken = generateOTP(); // Assume generateOTP is a function that creates an OTP

// //     // Step 3: Set OTP and expiry in user's record
// //     user.otp = resetToken;
// //     user.otpExpires = Date.now() + 10 * 60 * 1000; // 10 minutes from now
// //   console.log(resetToken);
// //     await user.save();

// //     // Step 4: Setup email options
// //     const mailOptions = {
// //       from: "jolaetopia81@gmail.com", // Replace with your email
// //       to: user.email, // Ensure this field is correctly populated
// //       subject: "Password Reset Request",
// //       text: `Your OTP for password reset is: ${resetToken}`,
// //     };

// //     // Step 5: Send the email
// //     const transporter = nodemailer.createTransport({
// //       service: "gmail",
// //       auth: {
// //         user: process.env.EMAIL_USER, // Your email
// //         pass: process.env.EMAIL_PASS, // Your email password
// //       },
// //     });

// //     await transporter.sendMail(mailOptions);

// //     res.status(200).json({ msg: "Password reset email sent successfully" });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error");
// //   }
// // };
// exports.forgotPassword = async (req, res) => {
//   const { email } = req.body;

//   try {
//     const user = await Users.findOne({ email });

//     if (!user) {
//       return res.status(400).json({ msg: "User not found" });
//     }

//     const otp = generateOTP();
//     user.resetPasswordToken = otp;
//     user.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // 10 minutes
//      console.log(otp);
//     await user.save();


//     const resetURL = `${req.protocol}://${req.get(
//       "host"
//     )}/api/auth/verify-otp/${otp}`;
//     const message = `You requested a password reset. Please verify your OTP using this link: \n\n ${resetURL}`;

//     await sendEmail({
//       to: user.email,
//       subject: "Password Reset OTP",
//       text: message,
//     });

//     res.json({ msg: "OTP sent for password reset" });
//   } catch (err) {
//     res.status(500).json({ msg: "Server error" });
//   }
// };
// //  exports.resendOTPpass = async (req, res) => {
// //   const { email } = req.body;

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(404).json({ msg: "User not found" }); // Return error if user doesn't exist
// //     }

// //     // Step 2: Generate a new 6-digit OTP
// //     const otp = generateOTP();
// //     user.resetPasswordToken = otp;
// //     user.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // 10 minutes
// //     console.log(otp);
// //     // Step 3: Save the new OTP and expiration to the user's record
// //     await user.save();
// //       //  const mailOptions = {
// //       //    from: "jolaetopia81@gmail.com", // Replace with your email
// //       //    to: user.email, // Ensure this field is correctly populated
// //       //    subject: "New OTP for Password Reset",
// //       //    text: `Your new OTP for password reset is: ${resetToken}. This OTP will expire in 10 minutes.`,
// //       //  };

// //        // Step 5: Send the email
// //       //  const transporter = nodemailer.createTransport({
// //       //    service: "gmail",
// //       //    auth: {
// //       //      user: process.env.EMAIL_USER, // Your email
// //       //      pass: process.env.EMAIL_PASS, // Your email password
// //       //    },
// //       //  });

// //       //  await transporter.sendMail(mailOptions);
// //     // Step 4: Send the new OTP to the user's email
// //     await sendEmail(
// //       email,
// //       // from: "jolaetopia81@gmail.com",
// //       // to: user.email,
// //       // subject: "New OTP for Password Reset",
// //        `Your new OTP for password reset is: ${otp}. This OTP will expire in 10 minutes.`,
// //     );

// //     res.status(200).json({ msg: "New OTP sent to your email" }); // Response if new OTP is sent
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error"); // Server error response
// //   }
// // };
// // exports.resendOTPpass = async (req, res) => {
// //   const { email } = req.body;
// //   // const {userId1} = req.params
// //   //  console.log(req.params.email)
// //   try {
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(400).json({ msg: "User not found" });
// //     }

// //     if (!user.resetPasswordToken || user.resetPasswordExpire < Date.now()) {
// //       const otp = generateOTP();
// //       user.resetPasswordToken = otp;
// //       user.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // 10 minutes
// //       console.log(otp)

// //       await user.save();

// //       const resetURL = `${req.protocol}://${req.get(
// //         "host"
// //       )}/api/auth/verify-otp/${otp}`;
// //       const message = `You requested a password reset. Please verify your OTP using this link: \n\n ${resetURL}`;

// //       await sendEmail({
// //         to: user.email,
// //         subject: "Password Reset OTP",
// //         text: message,
// //       });

// //       return res.json({ msg: "OTP resent for password reset" });
// //     }

// //     res.status(400).json({ msg: "Existing OTP is still valid" });
// //   } catch (err) {
// //     res.status(500).json({ msg: "Server error" });
// //   }
// // };
// // exports.verifyOTPpass = async (req, res) => {
// //   const { email, otp } = req.body;

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne({ email });

// //     if (!user) {
// //       return res.status(404).json({ msg: "User not found" });
// //     }

// //     // Step 2: Check if the OTP is correct and not expired
// //     if (user.otp !== otp || user.otpExpires < Date.now()) {
// //       return res.status(400).json({ msg: "Invalid or expired OTP" });
// //     }

// //     // Step 3: Set otpVerified to true
    

// //     // Step 4: Clear OTP fields
// //     user.otp = undefined;
// //     user.otpExpires = undefined;
// //     user.otpVerified = true;

// //     // Step 5: Save the user's record
// //     await user.save();

// //     res.status(200).json({ msg: "OTP verified successfully" });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error");
// //   }
// // };
// // exports.changePassword = async (req, res) => {
// //   const {  newPassword, confirmPassword } = req.body;

// //   try {
// //     // Step 1: Find the user by email
// //     const user = await Users.findOne(req.user.id);

// //     if (!user) {
// //       return res.status(404).json({ msg: "User not found" });
// //     }

// //     // Step 2: Check if the OTP was verified
// //     if (!user.otpVerified) {
// //       return res
// //         .status(400)
// //         .json({ msg: "OTP not verified. Please verify the OTP first." });
// //     }

// //     // Step 3: Check if newPassword and confirmPassword match
// //     if (newPassword !== confirmPassword) {
// //       return res.status(400).json({ msg: "Passwords do not match" });
// //     }

// //     // Step 4: Hash the new password
// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(newPassword, salt);

// //     // Step 5: Clear otpVerified flag
// //     user.otpVerified = true; // Reset this flag to prevent multiple password changes

// //     // Step 6: Save the new password
// //     await user.save();

// //     res.status(200).json({ msg: "Password changed successfully" });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server error");
// //   }
// // };

// // exports.changePassword = async (req, res) => {
// //   const { email, newPassword, confirmPassword } = req.body;

// //   if (newPassword !== confirmPassword) {
// //     return res.status(400).json({ msg: 'Passwords do not match' });
// //   }

// //   try {
// //     const user = await Users.findOne({ email });
// //     if (!user) return res.status(400).json({ msg: 'User not found' });

// //     if (!user.isVerified) return res.status(400).json({ msg: 'User not verified' });

// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(newPassword, salt);

// //     await user.save();

// //     res.status(200).json({ msg: 'Password changed successfully' });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send('Server Error');
// //   }
// // };
// // exports.changePassword = async (req, res) => {
// //   const { email, newPassword, confirmPassword } = req.body;

// //   if (newPassword !== confirmPassword) {
// //     return res.status(400).json({ msg: 'Passwords do not match' });
// //   }

// //   try {
// //     const user = await User.findOne({ email });
// //     if (!user) return res.status(400).json({ msg: 'User not found' });

// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(newPassword, salt);
// //     user.otp = undefined;  // Clear the OTP once the password is changed
// //     user.otpExpires = undefined;

// //     await user.save();

// //     res.status(200).json({ msg: 'Password changed successfully. You can now login.' });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send('Server Error');
// //   }
// // };
// // exports.verifyOTPpass = async (req, res) => {
// //   const { otp } = req.params;

// //   try {
// //     const user = await Users.findOne({
// //       resetPasswordToken: otp,
// //       resetPasswordExpire: { $gt: Date.now() },
// //     });

// //     if (!user) {
// //       return res.status(400).json({ msg: "Invalid or expired OTP" });
// //     }
// //   console.log("user id", user._id)
// //     res.json({ msg: "OTP verified successfully", userId: user.id });
// //   } catch (err) {
// //     res.status(500).json({ msg: "Server error" });
// //   }
// // };
// exports.verifyOTPpass = async (req, res) => {
//   const { userId, otp } = req.params; // OTP and userId from URL params

//   try {
//     // Find the user by userId and check if the OTP is valid
//     const user = await Users.findOne({
//       _id: userId,
//       resetPasswordToken: otp, // Check if OTP matches
//       resetPasswordExpire: { $gt: Date.now() }, // Ensure OTP hasn't expired
//     });

//     // If user is not found or OTP is invalid/expired
//     if (!user) {
//       return res.status(400).json({ msg: "Invalid or expired OTP" });
//     }

//     // OTP is valid, proceed to change the password in another route
//     res
//       .status(200)
//       .json({ msg: "OTP verified successfully", userId: user._id });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ msg: "Server error" });
//   }
// };
// // exports.changePassword = async (req, res) => {
// //   const { email,newPassword, confirmPassword } = req.body;
// //   const { userId } = req.params;
// //   if (newPassword !== confirmPassword) {
// //     return res.status(400).json({ msg: "Passwords do not match" });
// //   }

// //   try {
// //     const user = await Users.findOne({email});
// //     if (!user) return res.status(400).json({ msg: "User not found" });

// //     if (!user.isVerified)
// //       return res.status(400).json({ msg: "User not verified" });

// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(newPassword, salt);
// //     user.resetPasswordToken = undefined;
// //     user.resetPasswordExpire = undefined;
// //     await user.save();

// //     res.status(200).json({ msg: "Password changed successfully" });
// //   } catch (err) {
// //     console.error(err.message);
// //     res.status(500).send("Server Error");
// //   }
// // };
// // exports.changePassword = async (req, res) => {
// //   const { userId } = req.params;
// //   const { newPassword, confirmPassword } = req.body;

// //   try {
// //     const user = await Users.findById(userId);

// //     if (!user) {
// //       return res.status(400).json({ msg: "User not found" });
// //     }

// //     if (newPassword !== confirmPassword) {
// //       return res.status(400).json({ msg: "Passwords do not match" });
// //     }

// //     const salt = await bcrypt.genSalt(10);
// //     user.password = await bcrypt.hash(password, salt);
// //     user.resetPasswordToken = undefined;
// //     user.resetPasswordExpire = undefined;

// //     await user.save();
// //     res.json({ msg: "Password updated successfully" });
// //   } catch (err) {
// //     res.status(500).json({ msg: "Server error" });
// //   }
// // };
// exports.changePassword = async (req, res) => {
//   const { userId } = req.params; // Retrieve userId from URL params
//   const { newPassword, confirmPassword } = req.body; // New passwords from request body

//   try {
//     // Find the user by userId
//     const user = await User.findById(userId);

//     if (!user) {
//       return res.status(400).json({ msg: "User not found" });
//     }

//     // Check if the passwords match
//     if (newPassword !== confirmPassword) {
//       return res.status(400).json({ msg: "Passwords do not match" });
//     }

//     // Set the new password (you should hash the password before saving)
//     user.password = newPassword;

//     // Clear OTP and expiration after successful password reset
//     user.resetPasswordToken = undefined;
//     user.resetPasswordExpire = undefined;

//     // Save the updated user
//     await user.save();

//     res.status(200).json({ msg: "Password has been changed successfully" });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ msg: "Server error" });
//   }
// };